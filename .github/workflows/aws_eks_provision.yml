name: EKS - Provision 🏗️

on:
  pull_request:
    branches:
      - main
    paths:
      - 'aws/eks-gitops/**'
  push:
    branches:
      - develop
    paths:
      - 'aws/eks-gitops/**'
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-north-1'
  ROUTE53_DOMAIN_NAME: callistademo.org
  WORK_DIR: aws/eks-gitops

jobs:
  provision-eks-with-pulumi:
    runs-on: ubuntu-latest
    # env:
    #   PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    # Create an GitHub environment referencing our EKS cluster endpoint
    environment:
      name: 'aws-eks-staging'
    #   url: ${{ steps.traefik-expose.outputs.traefik_url }}
      # using outputs for providing the Pulumi created kubeconfig to subsequent jobs
      # see https://stackoverflow.com/a/61236803/4964553
      # & see https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idoutputs
    outputs:
      kubeconfig: ${{ steps.pulumi-up.outputs.kubeconfig }}
    steps:
      - name: Configuration for main branch 🏭
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "PULUMI_STACK=todo" >> $GITHUB_ENV
      
      - name: Configuration for develop branch 😎
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: echo "PULUMI_STACK=staging" >> $GITHUB_ENV

      - name: Checkout 🛎️
        uses: actions/checkout@v3
      
      - name: Setup Node ✨
        uses: actions/setup-node@v3
        with:
          node-version: 16
      
      - name: Configure AWS Credentials 🔐
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Pulumi dependencies 📦️ 
        run: npm install
        working-directory: ${{ env.WORK_DIR }}
      
      - name: Provision Infrastructure 🏗️
        uses: pulumi/actions@v3
        id: pulumi-up
        with:
          command: up
          stack-name: ${{ env.PULUMI_STACK }} 
          work-dir: ${{ env.WORK_DIR }}
          refresh: true;
          comment-on-pr: true;
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

        # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action
      - name: Try to connect to EKS cluster 🔌
        id: kube-conf
        run: |
          mkdir -p ~/.kube
          echo '${{ steps.pulumi-up.outputs.kubeconfig }}' > ~/.kube/config
          echo "--- Checking connectivity to cluster"
          kubectl get nodes
          kubectl version --short          

  install-and-run-argocd-on-eks:
    runs-on: ubuntu-latest
    needs: provision-eks-with-pulumi
    environment:
      name: argocd-dashboard-staging
      url: ${{ steps.dashboard-expose.outputs.dashboard_host }}
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      
      - name: Setup Node ✨
        uses: actions/setup-node@v3
        with:
          node-version: 16
      
      - name: Configure AWS Credentials 🔐
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Pulumi dependencies 📦️ 
        run: npm install
        working-directory: ${{ env.WORK_DIR }}

      - name: Install Pulumi 🏗️
        uses: pulumi/actions@v3
        with:
          command: preview # This step is only here to install Pulumi CLI to execute in next step...
          stack-name: staging # When using an individual account, only use stack-name.
          work-dir: ${{ env.WORK_DIR }}
          # refresh: true;
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Install Argo CD 
        id: pulumi-up-argocd # same as step in previous job, but with Argo CD setup added
        run: |
          pulumi stack select staging
          mkdir -p ~/.kube
          pulumi stack output kubeconfig --show-secrets  > ~/.kube/config
          export SETUP_ARGO_CD=yep
          echo "lets use --suppress-outputs here in order to prevent Pulumi from logging the kubeconfig into public GitHub Action logs"
          pulumi up -y --suppress-outputs
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd
        working-directory: ${{ env.WORK_DIR }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          WITH_ARGO_CD: true

# Some resources
# https://bitcoden.com/answers/share-variables-of-github-actions-job-to-multiple-subsequent-jobs-while-retaining-specific-order